# -*- coding: utf-8 -*-
"""ComparingClusterMethods.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bnIjdJ-XWbLsjTBDMAsvPEg7tuQvS0zY
"""

#kmean clustering

# kmean clustering for n_clusters = 20 and digits dataset
from sklearn import datasets
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

#load data
data = datasets.load_digits().data

#reduce
from sklearn.decomposition import PCA
pca = PCA(2)
df = pca.fit_transform(data)


#create kmean object
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters = 20)

#fit and predict
label = kmeans.fit_predict(df) 


#plot
import matplotlib.pyplot as plt
for i in range(20):
  plt.scatter(df[label == i , 0] , df[label == i , 1] , label = i)
plt.legend()
plt.show()

# density based clustering 

from sklearn import datasets
from sklearn.decomposition import PCA
from sklearn.cluster import DBSCAN

#load data
data = datasets.load_digits().data

#reduce
from sklearn.decomposition import PCA
pca = PCA(2)
df = pca.fit_transform(data)


#create density based clustering
from sklearn.cluster import DBSCAN
dbscan = DBSCAN(min_samples = 10, eps = 1.5)

#fit and predict
label = dbscan.fit_predict(df)


#plot. Draw the plot for labels 0, 1, 2, ..., 22
import matplotlib.pyplot as plt
for i in range(20):
  plt.scatter(df[label == i , 0] , df[label == i , 1] , label = i)
plt.legend()
plt.show()

#hierarchical clustering for n_clusters = 20 and digits dataset
from sklearn import datasets
from sklearn.decomposition import PCA
from sklearn.cluster import AgglomerativeClustering

#load data
data = datasets.load_digits().data

#reduce
from sklearn.decomposition import PCA
pca = PCA(2)
df = pca.fit_transform(data)


#create hierarchical clustering object
from sklearn.cluster import AgglomerativeClustering
hierarchical = AgglomerativeClustering(n_clusters = 20)

#fit and predict
label = hierarchical.fit_predict(df) 


#plot
import matplotlib.pyplot as plt
for i in range(20):
  plt.scatter(df[label == i , 0] , df[label == i , 1] , label = i)
plt.legend()
plt.show()